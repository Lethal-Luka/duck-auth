const mongoose = require('mongoose');

const inviteCodeSchema = new mongoose.Schema({
  code: {
    type: String,
    required: true,
    unique: true,
    uppercase: true,
    minlength: 6,
    maxlength: 20
  },
  // Associated subscription plan
  plan: {
    type: String,
    enum: ['basic', 'premium', 'pro'],
    required: true
  },
  // Duration of the plan (in days)
  duration: {
    type: Number,
    default: 30 // 30 days = 1 month
  },
  // Generated by admin or through purchase
  generatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  // Purchase reference (from Shoppy webhook)
  purchaseId: {
    type: String,
    sparse: true
  },
  purchaseEmail: {
    type: String,
    sparse: true
  },
  // Usage tracking
  isUsed: {
    type: Boolean,
    default: false
  },
  usedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  usedAt: {
    type: Date
  },
  // Expiration
  expiresAt: {
    type: Date,
    required: true
  },
  // Additional metadata
  metadata: {
    source: {
      type: String,
      enum: ['shoppy', 'admin', 'reseller'],
      default: 'admin'
    },
    notes: String
  }
}, {
  timestamps: true
});

// Index for efficient queries
inviteCodeSchema.index({ code: 1 });
inviteCodeSchema.index({ isUsed: 1, expiresAt: 1 });
inviteCodeSchema.index({ plan: 1, isUsed: 1 });

// Auto-generate code if not provided
inviteCodeSchema.pre('save', function(next) {
  if (!this.code) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 12; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    this.code = code;
  }
  next();
});

module.exports = mongoose.model('InviteCode', inviteCodeSchema);